/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */
/* default color for everything */
/* breakpoints */
/* max width of site column */
/* font faces 
	@font-face{
		font-family: 'BebasNeueBold';
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.otf);
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.woff);
	}
/* end font faces */
/* fontawesome variables */
/* these don't work well yet, avoid using */
/* end fontawesome variables */
/* 
 *	some default float/display/width properties we use often.
 *	
 *	usage:
 *		h3{
 *			@include floatblock();
 *		}
 */
/* 
 *	Set all font properties. Do a global find/replace within the 
 *	sass/templates/header folders on the $family options below to update.
 *	
 *	usage:
 *		h3{
 *			@include font('Open Sans',16,$white,0);
 *		}
 */
/* 
 *	Set font-size independant of the font mixin
 *	
 *	usage:
 *		p{
 *			@include font-size(16,0);
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	before or after the element it's called upon.
 *	
 *	usage:
 *		.button{
 *			@include arrow('before',$t-white,14,'\f105');
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	centered and facing down.
 *	
 *	usage:
 *		.button{
 *			@include arrowdown($t-white,14,'\f105');
 *		}
 */
/*
 *	Mixin to standardize focus styles. Add this rather than 
 *	styling each individually
 *	
 *	usage:
 *		a{
 *			@include focus_styles();
 *		}
 */
/*
 *	Using the calc function with fallback support
 *	usage:
 *		li{
 *			@include calc('width','100% - 75px','170px');
 *		}
 */
/* 
 *	Adds placeholder styles for input fields.
 *	
 *	usage:
 *		input{
 *			@include placeholder{
 *				color:#ccc;
 *				text-shadow:0 0 5px $t-black;
 *			}
 *		}
 */
/* 
 *	Sets width of items based on sibling count. Used
 *	primarily for navigation menus. The low and high
 *	values can be adjusted to reduce the amount of css
 *	generated. If you're not worried about this, keep the defaults.
 *	Need to add the parent, as the amp; doesn't take the direct parent
 *	but returns the full stack.
 *	
 *	usage (expecting between 4 and 7 total items):
 *		li{
 *			@include sibling_count_prop('li',4,7);
 *		}
 */
/* Mixin */
/* linear gradient  & helpers */
/* _custom.scss */
.wrapper {
  position: relative;
  overflow: hidden; }
  .wrapper > img {
    width: auto;
    min-width: 100%;
    z-index: -1;
    min-height: 100%; }
  .wrapper.overlay-cta {
    overflow: visible; }

.l-region img {
  max-width: 100%; }

.banner img {
  width: 100%; }

.column {
  padding: 0 20px; }
  @media (min-width: 45em) {
    .column {
      max-width: 1140px;
      margin: auto;
      float: none; } }
  @media (min-width: 70em) {
    .column {
      position: relative; } }

.twocolumns {
  width: 50%;
  padding-right: 20px; }

blockquote {
  color: #2a2a2a;
  font-size: 36px;
  font-size: 3.6rem;
  line-height: 42px;
  line-height: 4.2rem;
  font-family: 'Lobster', cursive;
  padding: 0 10px;
  margin-bottom: 15px; }
  blockquote:before {
    content: '\201C';
    color: #bbbbbb;
    font-size: 1.3em;
    line-height: 0.7em;
    padding-right: 5px; }
  blockquote:after {
    content: '\201D';
    color: #bbbbbb;
    font-size: 1.3em;
    line-height: 0.7em;
    padding-left: 5px; }

#breadcrumb {
  max-width: 1140px;
  margin: auto;
  float: none;
  padding: 0 20px; }

body .l-page {
  overflow: hidden;
  min-height: 100vh; }

body footer {
  background: black;
  border-top: 7px solid rgba(0, 0, 0, 0.15); }
  body footer .column h3 {
    color: #bbbbbb;
    font-size: 18px;
    font-size: 1.8rem;
    line-height: 24px;
    line-height: 2.4rem;
    font-family: 'Lobster', cursive;
    padding: 20px;
    text-align: center;
    text-transform: uppercase;
    margin: 20px 0 0; }
    @media (min-width: 45em) {
      body footer .column h3 {
        margin: 0 0 10px;
        padding: 0;
        text-align: left; } }
  body footer .column .footer .p-promo {
    color: #fff; }
    body footer .column .footer .p-promo h4 {
      color: #fff; }
    body footer .column .footer .p-promo ul {
      list-style: none;
      padding: 0;
      margin: 0; }
      body footer .column .footer .p-promo ul li {
        padding: 0;
        margin: 0; }
        body footer .column .footer .p-promo ul li a {
          display: inline-block;
          width: auto;
          color: #fff; }
        body footer .column .footer .p-promo ul li span {
          display: inline-block;
          width: auto;
          color: #fff;
          padding-right: 10px;
          width: 25px;
          text-align: center; }
        body footer .column .footer .p-promo ul li p {
          color: #fff;
          margin: 0; }
    body footer .column .footer .p-promo .city {
      margin-left: 25px; }

.visuallyhidden,
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
