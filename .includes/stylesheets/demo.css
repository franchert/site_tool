/* default color for everything */
/* breakpoints */
/* max width of site column */
/* font faces 
	@font-face{
		font-family: 'BebasNeueBold';
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.otf);
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.woff);
	}
/* end font faces */
/* fontawesome variables */
/* these don't work well yet, avoid using */
/* end fontawesome variables */
/* 
 *	some default float/display/width properties we use often.
 *	
 *	usage:
 *		h3{
 *			@include floatblock();
 *		}
 */
/* 
 *	Set all font properties. Do a global find/replace within the 
 *	sass/templates/header folders on the $family options below to update.
 *	
 *	usage:
 *		h3{
 *			@include font('Open Sans',16,$white,0);
 *		}
 */
/* 
 *	Set font-size independant of the font mixin
 *	
 *	usage:
 *		p{
 *			@include font-size(16,0);
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	before or after the element it's called upon.
 *	
 *	usage:
 *		.button{
 *			@include arrow('before',$t-white,14,'\f105');
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	centered and facing down.
 *	
 *	usage:
 *		.button{
 *			@include arrowdown($t-white,14,'\f105');
 *		}
 */
/*
 *	Mixin to standardize focus styles. Add this rather than 
 *	styling each individually
 *	
 *	usage:
 *		a{
 *			@include focus_styles();
 *		}
 */
/*
 *	Using the calc function with fallback support
 *	usage:
 *		li{
 *			@include calc('width','100% - 75px','170px');
 *		}
 */
/* 
 *	Adds placeholder styles for input fields.
 *	
 *	usage:
 *		input{
 *			@include placeholder{
 *				color:#ccc;
 *				text-shadow:0 0 5px $t-black;
 *			}
 *		}
 */
/* 
 *	Sets width of items based on sibling count. Used
 *	primarily for navigation menus. The low and high
 *	values can be adjusted to reduce the amount of css
 *	generated. If you're not worried about this, keep the defaults.
 *	Need to add the parent, as the amp; doesn't take the direct parent
 *	but returns the full stack.
 *	
 *	usage (expecting between 4 and 7 total items):
 *		li{
 *			@include sibling_count_prop('li',4,7);
 *		}
 */
/* Mixin */
/* linear gradient  & helpers */
.c-info {
  display: none !important;
  position: relative;
  float: right;
  left: -5px; }
  .c-info span.fa {
    width: auto;
    font-size: 16px;
    position: absolute;
    right: 0;
    z-index: 9999;
    color: #999; }
  .c-info div {
    display: none;
    border: 1px solid black;
    box-shadow: 2px 1px 5px rgba(0, 0, 0, 0.6);
    z-index: 9998;
    position: absolute;
    right: -5px;
    bottom: -20px;
    background: white;
    border-radius: 5px;
    padding: 20px; }
    .c-info div .half {
      width: 50%; }
      .c-info div .half ul {
        list-style: disc;
        padding: 0; }
        .c-info div .half ul li {
          padding: 0;
          font-size: 16px;
          line-height: 20px; }
    .c-info div h6 {
      font-size: 16px;
      line-height: 20px;
      margin: 0; }
    .c-info div p {
      font-size: 16px;
      line-height: 20px; }
  .c-info:hover span.fa {
    color: #333; }
  .c-info:hover div {
    display: block; }
  .c-info h1:before {
    content: "" !important; }
  .c-info h2:before {
    content: "" !important; }
  .c-info h3:before {
    content: "" !important; }
  .c-info h4:before {
    content: "" !important; }
  .c-info h5:before {
    content: "" !important; }
  .c-info h6:before {
    content: "" !important; }

.owl-stage-outer .c-info div,
.l-head .c-info div {
  top: -20px;
  bottom: initial; }

body.demo .wrapper,
body.demo .l-page {
  overflow: visible; }

body.demo .c-info {
  display: block !important;
  float: none;
  width: auto;
  padding: 0;
  border: none;
  margin: 0;
  overflow: visible; }
  body.demo .c-info .half {
    width: 50%; }

body.demo a[href="#"] {
  outline: dotted 2px #00BFFF !important; }

body.demo h1:before {
  content: 'H1'; }

body.demo h2:before {
  content: 'H2'; }

body.demo h3:before {
  content: 'H3'; }

body.demo h4:before {
  content: 'H4'; }

body.demo h5:before {
  content: 'H5'; }

body.demo h6:before {
  content: 'H6'; }

body.demo h1:before, body.demo h2:before, body.demo h3:before, body.demo h4:before, body.demo h5:before, body.demo h6:before {
  color: red;
  position: relative;
  top: -14px;
  font-size: 10px; }

body.demo .l-region {
  border: 1px dashed red;
  border-radius: 8px; }

body.demo .l-featured-header {
  min-height: 100px; }

body.demo .l-content-center .l-nav-sidebar {
  min-height: 500px; }

body.demo .l-content-center .l-content-featured {
  min-height: 300px; }

body.demo .l-content-center .l-content-wrapper {
  min-height: 200px; }
  body.demo .l-content-center .l-content-wrapper .l-content {
    min-height: 200px; }
  body.demo .l-content-center .l-content-wrapper .l-promo-sidebar {
    min-height: 200px; }

body.demo .l-content-footer {
  min-height: 200px; }

body.demo .accordion:before {
  content: ''; }

button.demo-toggle {
  position: fixed;
  left: -40px;
  bottom: 50%;
  line-height: 20px;
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
  width: 52px;
  background: #EB6009;
  border: none;
  text-transform: uppercase;
  border-radius: 5px;
  z-index: 2;
  -webkit-transition: left 0.2s ease-in-out;
  transition: left 0.2s ease-in-out;
  padding-top: 8px;
  padding-bottom: 20px; }
  button.demo-toggle:hover {
    left: -17px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
