/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */
/* default color for everything */
/* breakpoints */
/* max width of site column */
/* font faces 
	@font-face{
		font-family: 'BebasNeueBold';
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.otf);
		src: url(/.includes/fonts/bebas/bebasneue_bold-webfont.woff);
	}
/* end font faces */
/* fontawesome variables */
/* these don't work well yet, avoid using */
/* end fontawesome variables */
/* 
 *	some default float/display/width properties we use often.
 *	
 *	usage:
 *		h3{
 *			@include floatblock();
 *		}
 */
/* 
 *	Set all font properties. Do a global find/replace within the 
 *	sass/templates/header folders on the $family options below to update.
 *	
 *	usage:
 *		h3{
 *			@include font('Open Sans',16,$white,0);
 *		}
 */
/* 
 *	Set font-size independant of the font mixin
 *	
 *	usage:
 *		p{
 *			@include font-size(16,0);
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	before or after the element it's called upon.
 *	
 *	usage:
 *		.button{
 *			@include arrow('before',$t-white,14,'\f105');
 *		}
 */
/* 
 *	Add a fontawesome icon ($type controls this) as a pseudoelement
 *	centered and facing down.
 *	
 *	usage:
 *		.button{
 *			@include arrowdown($t-white,14,'\f105');
 *		}
 */
/*
 *	Mixin to standardize focus styles. Add this rather than 
 *	styling each individually
 *	
 *	usage:
 *		a{
 *			@include focus_styles();
 *		}
 */
/*
 *	Using the calc function with fallback support
 *	usage:
 *		li{
 *			@include calc('width','100% - 75px','170px');
 *		}
 */
/* 
 *	Adds placeholder styles for input fields.
 *	
 *	usage:
 *		input{
 *			@include placeholder{
 *				color:#ccc;
 *				text-shadow:0 0 5px $t-black;
 *			}
 *		}
 */
/* 
 *	Sets width of items based on sibling count. Used
 *	primarily for navigation menus. The low and high
 *	values can be adjusted to reduce the amount of css
 *	generated. If you're not worried about this, keep the defaults.
 *	Need to add the parent, as the amp; doesn't take the direct parent
 *	but returns the full stack.
 *	
 *	usage (expecting between 4 and 7 total items):
 *		li{
 *			@include sibling_count_prop('li',4,7);
 *		}
 */
/* Mixin */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
